.TH VUSH 1 "" "vush"
.SH NAME
vush \- simple UNIX shell
.SH SYNOPSIS
.B vush
.RI [ scriptfile ]
.SH DESCRIPTION
vush is a lightweight UNIX shell supporting command execution,
pipelines, command chaining with ';', '&&' and '||',
environment variable expansion using \fB$VAR\fP or \fB${VAR}\fP (with "$?" storing the last exit status),
command substitution using backticks or \fB$(\fPcmd\fB)\fP,
arithmetic expansion using \fB$((\fPexpr\fB))\fP and a \fBlet\fP builtin,
wildcard matching for '*' and '?', input and output redirection with
\'<\', \'\>', \'>>\', \"2>\", \"2>>\" and \"&>\", and background jobs.  When a
\fIscriptfile\fP is supplied, commands are read from that file
instead of standard input.  A `#` outside of quotes begins a comment
and causes the rest of the line to be ignored.
A function may be defined using \fIname\fP() {\fIcommands\fP} and invoked like a command.
A trailing backslash joins the next line before parsing.
When run interactively, arrow keys allow editing the current line and
recalling previous commands from history.  `Ctrl-A` or the Home key moves
the cursor to the start of the line, `Ctrl-E` or End moves to the end and
`Ctrl-U` clears from the cursor back to the beginning.  `Ctrl-W` deletes
the word before the cursor, `Ctrl-K` deletes from the cursor to the end
of the line and `Ctrl-L` clears the screen and redraws the current line.
Typing `!!` repeats the previous command while `!prefix` recalls the most
recent command beginning with `prefix`.
If \fB~/.vushrc\fP exists, commands from this file are executed before
the first prompt is shown.
.SH OPTIONS
.TP
.BI -c " command"
Execute the provided command string non-interactively and exit with its
status.
.SH POSITIONAL PARAMETERS
When executing a script file, the remaining command line words become
positional parameters.  \$0 expands to the script path, \$1 through \$9
refer to subsequent parameters, \$@ expands to all parameters separated
by spaces and \$# expands to the number of parameters.  The
\fBshift\fP builtin discards the first parameter and moves the rest down.

.SH ASSIGNMENTS
Words of the form \fBNAME=value\fP appearing before a command are added to that
command's environment only.  Using the same syntax without a command creates a
shell variable that persists but is not exported.
.SH CONTROL STRUCTURES
The keywords \fBif\fP, \fBthen\fP, \fBelse\fP, \fBelif\fP and \fBfi\fP provide
conditional execution. Commands following \fBthen\fP run when the test before
it exits with status 0. An optional \fBelif\fP or \fBelse\fP section executes
when previous tests fail.
.PP
Loops are created with \fBwhile\fP/\fBdo\fP/\fBdone\fP or \fBfor\fP/\fBin\fP/\fBdo\fP/\fBdone\fP.
The \fBwhile\fP condition is evaluated before each iteration while \fBfor\fP
assigns each word to a variable in turn.
.PP
Example:
.EX
if test "$USER" = root; then echo admin; else echo user; fi
for x in a b c; do echo $x; done
export i=0; while test $i -lt 2; do echo $i; export i=$(expr $i + 1); done
.EE
.SH BUILTINS
.TP
.B cd [dir]
Change the current directory. Without an argument it switches to \fB$HOME\fP.
Both \fB~\fP and \fB~user\fP expand to home directories using the password
database. After a successful change \fB$PWD\fP and \fB$OLDPWD\fP are updated.
Using \fBcd -\fP prints and switches to \fB$OLDPWD\fP. When the directory does
not begin with \fB/\fP or \fB.\fP, each entry in the \fBCDPATH\fP environment
variable is searched. If a path from \fBCDPATH\fP is used the resolved
directory is printed on success. Example: \fBcd ~otheruser\fP
.TP
.B pushd dir
Push the current directory onto a stack and switch to \fIdir\fP. The stack is
printed after the change.
.TP
.B popd
Switch to the directory most recently pushed with \fBpushd\fP. The stack is
printed after the switch.
.TP
.B dirs
Display the directory stack.
.TP
.B exit [STATUS]
Exit the shell with the given status (default 0).
.TP
.B pwd
Print the current working directory.
.TP
.B jobs
List running background jobs.
.TP
.B fg ID
Wait for job ID in the foreground.
.TP
.B bg ID
Continue job ID in the background.
.TP
.B kill [-SIGNAL] ID
Send a signal to job ID.
.TP
.B export NAME=value
Set an environment variable for the shell.
.TP
.B unset \fIname\fP
Remove an environment variable.
.TP
.B history [-c | -d \fInum\fP]
Show command history, clear it with \fB-c\fP, or delete entry \fInum\fP with \fB-d\fP.
History is saved to the file specified by \fBVUSH_HISTFILE\fP (default \fB~/.vush_history\fP).
The number of entries kept is controlled by the \fBVUSH_HISTSIZE\fP environment variable (default 1000).
.TP
.B alias \fIname\fP=\fIvalue\fP
Set an alias or list aliases when used without arguments.
.TP
.B unalias \fIname\fP
Remove an alias.
.TP
.B read [-r] \fIvar\fP ...
Read a line from standard input and assign the words to each \fIvar\fP in
order. The last variable receives the remainder of the line. With \fB-r\fP
backslashes are not treated specially.
.TP
.B return [status]
Return from a shell function with the given status (default 0).
.TP
.B shift
Shift positional parameters down by one.
.TP
.B let expr
Evaluate an arithmetic expression and return success if the result is non-zero.
.TP
\.B set [-e|-u|-x]
Toggle shell options. \-e exits on command failure, \-u errors on
undefined variables and \-x prints each command before execution.
.TP
Aliases are saved to the file specified by \fBVUSH_ALIASFILE\fP (default \fB~/.vush_aliases\fP), one \fIname\fP=\fIvalue\fP per line.
.TP
Functions are saved to the file specified by \fBVUSH_FUNCFILE\fP (default \fB~/.vush_funcs\fP).
.TP
.B type \fIname\fP...
For each argument, print whether it is an alias, builtin or the full path of an
executable found in \fB$PATH\fP.
.TP
.B source \fIfile\fP
Read commands from \fIfile\fP.
.TP
.B . \fIfile\fP
Alias for \fBsource\fP.
.TP
.B help
Display information about built-in commands.
.SH ENVIRONMENT
.TP
.B PS1
Controls the interactive shell prompt. The contents of this variable are
printed before each command and undergo normal variable and command
substitution. The default prompt is \"vush> \" but users may set \fBPS1\fP to any
string to include information such as the current directory.
.SH REDIRECTION
Standard input can be redirected with '<'.  Standard output may be
redirected with '>' or '>>' to append.  Likewise, file descriptor 2
(standard error) can be redirected using '2>' or '2>>'.
Both descriptors may be sent to the same file with '&>' or '>&file'.
File descriptors can also be duplicated, e.g. '2>&1' or '>&2'.
Here-documents can be created with '<<WORD'. Lines are read until a
line containing only WORD is found and the intervening text becomes the
command's standard input.
.SH SEE ALSO
README.md
.SH TESTING
Run "make test" in the source tree to execute the automated Expect scripts.
They exercise the interactive line editor and built-in commands.
