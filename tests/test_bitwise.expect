#!/usr/bin/env expect
set timeout 5
spawn [file dirname [info script]]/../build/vush
expect {
    "vush> " {}
    timeout { send_user "prompt timeout\n"; exit 1 }
}
send {echo $((1 & 3))\r}
expect {
    -re "\[\r\n\]+1\[\r\n\]+vush> " {}
    timeout { send_user "and failed\n"; exit 1 }
}
send {echo $((2 | 4))\r}
expect {
    -re "\[\r\n\]+6\[\r\n\]+vush> " {}
    timeout { send_user "or failed\n"; exit 1 }
}
send {echo $((5 ^ 6))\r}
expect {
    -re "\[\r\n\]+3\[\r\n\]+vush> " {}
    timeout { send_user "xor failed\n"; exit 1 }
}
send {echo $((1 << 3))\r}
expect {
    -re "\[\r\n\]+8\[\r\n\]+vush> " {}
    timeout { send_user "lshift failed\n"; exit 1 }
}
send {echo $((8 >> 2))\r}
expect {
    -re "\[\r\n\]+2\[\r\n\]+vush> " {}
    timeout { send_user "rshift failed\n"; exit 1 }
}
send {echo $((1 | 2 & 1))\r}
expect {
    -re "\[\r\n\]+1\[\r\n\]+vush> " {}
    timeout { send_user "precedence failed\n"; exit 1 }
}
send {echo $((1 + 2 << 3))\r}
expect {
    -re "\[\r\n\]+24\[\r\n\]+vush> " {}
    timeout { send_user "shift precedence failed\n"; exit 1 }
}
send {echo $(((1 << 3) == 8))\r}
expect {
    -re "\[\r\n\]+1\[\r\n\]+vush> " {}
    timeout { send_user "equality failed\n"; exit 1 }
}
send "exit\r"
expect {
    eof {}
    timeout { send_user "eof timeout\n"; exit 1 }
}
